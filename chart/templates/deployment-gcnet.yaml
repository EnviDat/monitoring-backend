{{- if .Values.gcnetImporter.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}-import-gcnet
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "chart.selectorLabelsGCNET" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "chart.selectorLabelsGCNET" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      hostAliases:
        {{- toYaml .Values.hostAliases | nindent 8 }}
      containers:
        - name: importer
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports: []
          command: ["/bin/sh", "-c"]
          args:
            - |
              python -c '
              import os
              from gcnet import main
              interval = os.getenv("GCNET_INTERVAL_MINS", default=10)
              main.main([f"--repeatInterval {interval}"])
              '
          resources:
            {{- toYaml .Values.gcnetImporter.resources | nindent 12 }}
          env:
            {{- toYaml .Values.extraEnv | nindent 12 }}
            - name: GCNET_INTERVAL_MINS
              value: {{ .Values.gcnetImporter.intervalMins | quote }}
          envFrom:
            {{- toYaml .Values.extraEnvFrom | nindent 12 }}
          volumeMounts: []
          {{- if .Values.probes.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /gcnet/models
              host: localhost
              port: {{ .Values.service.port }}
            failureThreshold: 1
            periodSeconds: 30
            initialDelaySeconds: 10
            timeoutSeconds: 15
          {{- end }}
          {{- if .Values.probes.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready --host $DATABASE_HOST
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
          {{- end }}
          {{- if .Values.probes.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /gcnet/models
              host: localhost
              port: {{ .Values.service.port }}
            failureThreshold: 5
            periodSeconds: 10
            initialDelaySeconds: 20
            timeoutSeconds: 15
          {{- end }}
      volumes: []
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}